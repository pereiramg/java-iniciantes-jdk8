Alguns termos:

Applets
Servlet
bytecode
JVM
Orientação a Objeto - Encapsulamento / Polimorfismo / Herança
Metodo - Sub-rotina
Modificador de acesso
Unicode
Tipagem
Atribuição
Intruções de seleção - if / switch
Instrução de iteração - for / while / do-while
Intrução de salto - break, continue
Recursão - onde algo é definido a partir de si mesmo.
Exemplo de como utilizar: http://www.linhadecodigo.com.br/artigo/3316/recursividade-em-java.aspx#:~:text=A%20recursividade%20trabalha%20de%20forma,ser%20o%20primeiro%20a%20sair
Static - faz que ele seja iniciado primeiro, em casos de variavel, fica como global
            disponivel para todos os objetos.
varargs - o parametro varargs deve ser o ultimo
            ex.: int doIt(int i, int j, int ... v)
        Só pode haver um parâmetro varargs
Classes -> Metodos
Classes - são uma abstração lógica que descreve a forma e comportamento de um objeto.
Objeto - é uma instancia fisica da classe.
Objeto - Cada objeto de classe tem sua propria copia das variavel de instancia da classe.
Metodos -> Argumentos -> Parametros
Dentro do metodo, a variavel que recebe os argumentos é chamada parametro.
New - aloca memoria para um objeto e o iniciliza usando seu Construtor

Operadores - Aritmeticos, bitwise, relacional, logico

Construtor - fornece valores iniciais para variaves de instancia definidas pela
classe ou para executar algum outro procedimento de inicialização necessaria a
criação de um objeto totalmente formado.

Incremento e decremento - prefixada(++x)/executa de imediato  e 
posfixada(x++) depois do termino do bloco

extends
class y extends x{}

super - usado para referenciar as superclasse
sobrecarga - um metodo de mesmo nome mas com diferentes Parametros (assinatura)
sobreposição - Quando um metodo de uma subclasse tem a mesma assinatura com 
        a superclasse, assim ocorre a sobreposição, onde a prioridade é da subclasse.
Metodo abstrato - Assegura que uma subclasse sobreponha realmente todos os métodos necessarios.
    Não pode ser aplicado a metodos Static e Construtor
    Ex.: abstract class teste{}
final - impede a sobreposição e a Herança. Também pode ser usado a variaveis para criar constantes.
    Ex.: final void teste(){}
    Ex.: final Class test{}
    Ex.: final int var = 1;

Object - Classe especial que é uma superclasse implicita de todas as outras classes.
    Todas as outras classes são subclasses de Object.
    Object clone() --> Cria um novo objeto igual ao objeto que está sendo clonado.
    boolean equals(Object objeto) --> Determina se um objeto é igual a outro
    void finalize() --> Chamado antes de um objeto não usado ser reciclado
    Class<?>getClass() --> Obtém a classe de um objeto no tempo de execução.
    int hashCode() --> Retorna o código hash associado ao objeto chamador
    void notify() --> Retoma a execução de uma thread que está esperando no objeto chamador
    void notifyAll() --> Retoma a execução de todas as threads que estão esperando no objeto chamador
    String toString() --> Retorna um string que descreve o objeto.
    void wait()  ----------------------------------------> 
    void wait(long millissegundos) ----------------------> Espera outra thread de execução
    void wait(long millissegundos, int nanossegundos) --->
Obs.: O metodos getClass(), notify(), notifyAll() e wait() são declarados como final.
    Você pode sobrepor os demais.

package - agrupar partes relacionas de um programa

Valores para começar a sua entrada
Hexadecimal - 0x - 0X
Binario - 0b - 0B
Octal - 0



